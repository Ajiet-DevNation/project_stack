// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////
// User & Auth Models
/////////////////////

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  projects      Project[]      @relation("UserProjects")
  comments      Comment[]
  likes         Like[]
  contributions Contributor[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/////////////////////
// ProjectStack Models
/////////////////////

model Project {
  id           String         @id @default(cuid())
  title        String
  description  String
  githubUrl    String?
  liveUrl      String?
  thumbnail    String?
  createdAt    DateTime       @default(now())
  authorId     String
  author       User           @relation("UserProjects", fields: [authorId], references: [id])
  comments     Comment[]
  likes        Like[]
  contributors Contributor[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  userId     String
  projectId  String
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  projectId  String
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
}

model Contributor {
  id         String   @id @default(cuid())
  userId     String
  projectId  String
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
}
