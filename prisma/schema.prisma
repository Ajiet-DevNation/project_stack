generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  onboarded     Boolean   @default(false)
  username      String?   @unique
  accounts      Account[]
  profile       Profile?
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            String        @id @default(cuid())
  name          String
  image         String?
  section       String
  branch        String
  year          String
  skills        String[]
  bio           String?
  userId        String        @unique
  applications  Application[]
  comments      Comment[]
  contributions Contributor[]
  likes         Like[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects      Project[]     @relation("ProjectAuthor")
}

model Project {
  id             String        @id @default(cuid())
  title          String
  description    String
  liveUrl        String?
  thumbnail      String?
  authorId       String
  endDate        DateTime
  githubLink     String?
  isActive       Boolean       @default(true)
  postedOn       DateTime      @default(now())
  projectStatus  String
  requiredSkills String[]
  startDate      DateTime
  applicants     Application[]
  comments       Comment[]
  contributors   Contributor[]
  likes          Like[]
  author         Profile       @relation("ProjectAuthor", fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  projectId String
  profileId String
  author    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Like {
  id        String  @id @default(cuid())
  projectId String
  profileId String
  user      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([profileId, projectId])
}

model Contributor {
  id        String  @id @default(cuid())
  projectId String
  profileId String
  user      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([profileId, projectId])
}

model Application {
  id        String   @id @default(cuid())
  profileId String
  projectId String
  appliedAt DateTime @default(now())
  status    String   @default("Pending")
  applicant Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([profileId, projectId])
}
